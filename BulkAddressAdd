#Envrionment Variables
$csvpath = "C:\Temp\"
$csvfile = "inputexcel.csv"
$errorlogpath = "C:\Temp\"
$errorlogfile = "configdiff.txt"

$csvfullpath = join-path -path $csvpath -ChildPath $csvfile
$errorlog = join-path -path $errorlogpath -ChildPath $errorlogfile
date >> $errorlog


#Import CSV
$csv = Get-Content $csvfullpath  | ConvertFrom-CSV

#Looping csv to add address/addressgroup
foreach ($endpoint in $csv) {
    $AddressNames = ($endpoint.AddressName) 
    Foreach ($AddressName in $AddressNames) {
        try
        {
           Set-PaAddress -Name $AddressName -Value $endpoint.AddressValue -Type $endpoint.Addresstype -Description $endpoint.AddressDescription -ErrorAction Stop
            if (-not ([string]::IsNullOrEmpty($endpoint.AddressGroup))) {
           Set-PaAddressGroup -Name $endpoint.AddressGroup -Member $AddressName -ErrorAction Stop 
           }
        }
        
        catch
        {
           Write-host $AddressName
           Write-Host "An error occurred on the above addressName:"
           Write-Host $_

           $AddressName >> $errorlog
           "An error occurred on the above addressName:" >> $errorlog
           $_ >> $errorlog


        }
        }

    }

#Commit and configDiff
#Get-paConfigDiff
#Get-paConfigDiff >> C:\Temp\configdiff.txt
#Invoke-PaCommit -Confirm


#Useful commands
#$json = Get-Content C:\Temp\addressdatainput.json | ConvertFrom-Json
#           if ((-not ([string]::IsNullOrEmpty($endpoint.AddressName))) -And (-not ([string]::IsNullOrEmpty($endpoint.Addresstype))) -And (-not ([string]::IsNullOrEmpty($endpoint.AddressValue))))
#echo $AddressName
        #echo $endpoint.Addresstype
        #echo $endpoint.AddressValue
        #echo $endpoint.AddressDescription
        #echo Set-PaAddress -Name $AddressName -Value $endpoint.AddressValue -Type $endpoint.Addresstype -Description $endpoint.AddressDescription -ErrorAction Stop >> C:\Temp\configdiff.txt
                   #           throw $_
